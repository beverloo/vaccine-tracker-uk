{"version":3,"sources":["components/StackedVaccinationPlot.js","components/VaccinationProgressPlot.js","App.js","reportWebVitals.js","index.js"],"names":["CustomizedAxisTick","x","y","payload","stroke","transform","dy","textAnchor","fill","value","StackedVaccinationPlot","parsedData","console","log","Card","fluid","Content","Header","Meta","Description","ResponsiveContainer","width","height","AreaChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","Legend","verticalAlign","formatter","entry","index","XAxis","dataKey","tick","domain","date","length","label","YAxis","tickFormatter","Intl","NumberFormat","format","Text","dx","offset","angle","Tooltip","name","Area","type","stackId","ReferenceLine","Label","position","extra","Icon","CustomBarLabel","viewBox","fontFamily","parseInt","toFixed","VaccinationProgressPlot","BarChart","layout","hide","align","wrapperStyle","paddingLeft","Bar","background","fontSize","fontStyle","App","useState","rawData","setRawData","setParsedData","useEffect","fetch","mode","then","response","text","catch","error","raw_data","readString","header","sort","a","b","Date","className","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.343ba8e9.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ReferenceLine,\n  Text,\n  Legend,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={16}\n        textAnchor=\"end\"\n        fill=\"#666\"\n        transform=\"rotate(-35)\"\n      >\n        {payload.value}\n      </text>\n    </g>\n  );\n};\n\nconst StackedVaccinationPlot = ({ parsedData }) => {\n  if (parsedData) {\n    console.log(parsedData);\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>Doses administered over time</Card.Header>\n          <Card.Meta>\n            Cumulative first and second doses administered since 11 January\n            2021.\n          </Card.Meta>\n          <Card.Description>\n            <ResponsiveContainer width=\"100%\" height={500}>\n              <AreaChart\n                data={parsedData}\n                margin={{\n                  top: 10,\n                  right: 30,\n                  left: 100,\n                  bottom: 100,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Legend\n                  verticalAlign=\"top\"\n                  height={36}\n                  formatter={(value, entry, index) => {\n                    switch (value) {\n                      case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                        return \"First Dose\";\n\n                      case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                        return \"Second Dose\";\n\n                      default:\n                        return \"\";\n                    }\n                  }}\n                />\n                <XAxis\n                  dataKey=\"date\"\n                  tick={<CustomizedAxisTick />}\n                  domain={[\n                    parsedData[0].date,\n                    parsedData[parsedData.length - 1].date,\n                  ]}\n                  label={{ dy: 75, value: \"Reporting Date\" }}\n                />\n                <YAxis\n                  domain={[0, 20000000]}\n                  tickFormatter={(value) =>\n                    new Intl.NumberFormat(\"en\").format(value)\n                  }\n                  label={\n                    <Text x={0} y={0} dx={50} dy={270} offset={0} angle={-90}>\n                      Individuals Vaccinated\n                    </Text>\n                  }\n                />\n                <Tooltip\n                  formatter={(value, name) => {\n                    switch (name) {\n                      case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                        return [\n                          new Intl.NumberFormat(\"en\").format(value),\n                          \"First Dose\",\n                        ];\n\n                      case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                        return [\n                          new Intl.NumberFormat(\"en\").format(value),\n                          \"Second Dose\",\n                        ];\n\n                      default:\n                        return [null, null];\n                    }\n                  }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n                  stackId=\"1\"\n                  stroke=\"#8884d8\"\n                  fill=\"#8884d8\"\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n                  stackId=\"1\"\n                  stroke=\"#82ca9d\"\n                  fill=\"#82ca9d\"\n                />\n                <ReferenceLine y={15000000} stroke=\"red\" strokeDasharray=\"3 3\">\n                  <Label value=\"Top 4 Priority Groups Target\" position=\"top\" />\n                </ReferenceLine>\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"database\" />\n          Data Source: Public Health England (Updated 17/01/2021)\n        </Card.Content>\n      </Card>\n    );\n  } else return null;\n};\n\nexport default StackedVaccinationPlot;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>Rollout Tracker</Card.Header>\n          <Card.Meta>\n            Breakdown of the overall COVID vaccine rollout in the UK for 1st and\n            2nd doses.\n          </Card.Meta>\n          <Card.Description>\n            <ResponsiveContainer width={\"100%\"} height={150}>\n              <BarChart\n                data={data}\n                layout=\"vertical\"\n                margin={{\n                  top: 5,\n                  right: 0,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n                <XAxis type=\"number\" domain={[0, 66000000]} hide />\n                <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n                <Legend\n                  verticalAlign=\"top\"\n                  height={50}\n                  align=\"center\"\n                  wrapperStyle={{\n                    paddingLeft: \"0px\",\n                  }}\n                  formatter={(value, entry, index) => {\n                    switch (value) {\n                      case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                        return \"First Dose\";\n\n                      case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                        return \"Second Dose\";\n\n                      default:\n                        return \"\";\n                    }\n                  }}\n                />\n                <Bar\n                  dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n                  fill=\"#8884d8\"\n                  background={{ fill: \"#eee\" }}\n                  label={<CustomBarLabel />}\n                />\n                <Bar\n                  dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n                  fill=\"#82ca9d\"\n                  background={{ fill: \"#eee\" }}\n                  label={<CustomBarLabel />}\n                />\n                <ReferenceLine x={13000000} stroke=\"red\" strokeDasharray=\"3 3\">\n                  <Label\n                    value=\"Top 4 Priority Groups\"\n                    position=\"top\"\n                    fontSize=\"15\"\n                    fontStyle=\"bold\"\n                    fontFamily={\"Roboto\"}\n                  />\n                </ReferenceLine>\n                <ReferenceLine x={25000000} stroke=\"red\" strokeDasharray=\"3 3\">\n                  <Label\n                    value=\"All Priority Groups\"\n                    position=\"bottom\"\n                    fontSize=\"15\"\n                    fontStyle=\"bold\"\n                    fontFamily={\"Roboto\"}\n                  />\n                </ReferenceLine>\n                <ReferenceLine x={66000000} stroke=\"red\" strokeDasharray=\"3 3\">\n                  <Label\n                    value=\"Whole Population\"\n                    position=\"top\"\n                    fontSize=\"15\"\n                    dx={-60}\n                    fontStyle=\"bold\"\n                    fontFamily={\"Roboto\"}\n                  />\n                </ReferenceLine>\n              </BarChart>\n            </ResponsiveContainer>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"database\" />\n          Data Source: Public Health England (Updated 17/01/2021)\n        </Card.Content>\n      </Card>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport { readString } from \"react-papaparse\";\nimport StackedVaccinationPlot from \"./components/StackedVaccinationPlot\";\nimport VaccineStatistics from \"./components/VaccineStatistics\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\n\nfunction App() {\n  const [rawData, setRawData] = useState(null);\n  const [parsedData, setParsedData] = useState(null);\n\n  useEffect(() => {\n    fetch(\"./data/PHE-vaccination/data_2021-Jan-17.csv\", { mode: \"no-cors\" })\n      .then((response) => response.text())\n      .then((data) => setRawData(data))\n      .catch((error) => console.error(error));\n  }, []);\n\n  useEffect(() => {\n    if (rawData) {\n      const results = readString(rawData, {\n        header: true,\n      });\n\n      let raw_data = results.data;\n\n      raw_data.sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n\n      setParsedData(raw_data);\n    }\n  }, [rawData]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        {/* <VaccineStatistics parsedData={parsedData} /> */}\n        <VaccinationProgressPlot parsedData={parsedData} />\n        <StackedVaccinationPlot parsedData={parsedData} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}