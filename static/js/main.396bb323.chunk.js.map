{"version":3,"sources":["data/ImportantValues.js","components/StackedVaccinationPlot.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","components/ScoreCard.js","components/ScoreCardGroup.js","components/VaccineStatistics.js","assets/logo.png","App.js","reportWebVitals.js","index.js"],"names":["TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS","TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","CustomizedAxisTick","x","y","payload","stroke","dx","dy","fill","moment","value","format","StackedVaccinationPlot","parsedData","ResponsiveContainer","width","height","AreaChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","Legend","verticalAlign","formatter","entry","index","XAxis","dataKey","tick","domain","date","length","label","YAxis","tickFormatter","Math","round","Text","offset","angle","Tooltip","name","Intl","NumberFormat","Area","type","stackId","ReferenceLine","Label","position","CustomBarLabel","viewBox","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","BarChart","layout","hide","align","wrapperStyle","paddingLeft","Bar","background","fontSize","fontStyle","DailyRatesPlot","ComposedChart","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","Card","fluid","Content","Header","Meta","Description","textAlign","extra","Icon","ScoreCard","targetDate","targetIndividuals","useState","transformedData","setTransformedData","useEffect","transformedData_","JSON","parse","stringify","forEach","datum","startOf","diff","add","computePredictedDaysToTarget","progressContent","latestIndex","delta","style","marginTop","paddingBottom","size","color","marginLeft","marginRight","abs","Grid","Column","centered","Segment","basic","maxWidth","as","Subheader","slice","deltaTargetVsPredicted","ScoreCardGroup","stackable","columns","Row","VaccineStatistics","loaded","setLoaded","allDosesStatistics","setAllDosesStatistics","firstDosesStatistics","setFirstDosesStatistics","secondDosesStatistics","setSecondDosesStatistics","total","new","dayOnDay","weekOnWeek","completedCourses","sevenDaysRate","sevenDaysRateDeltaDay","adultPopulationDone","priorityGroupsDone","dividing","Statistic","Group","Value","App","setParsedData","updateDate","setUpdateDate","computeAverageRate","days","fromKey","toKey","_","mean","a","rawData","vaccination_json","sort","b","Date","latestDate","className","Container","Image","src","logo","circular","bordered","padded","raised","List","bulleted","Item","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.396bb323.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 53000000;\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-09-21\"; // Estimate based on annoucement (https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout)\n","import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ReferenceLine,\n  Text,\n  Legend,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport { TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS } from \"../data/ImportantValues\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill=\"#666\"\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst StackedVaccinationPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <AreaChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 15,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            domain={[0, 16000000]}\n            tickFormatter={(value) => `${Math.round(value / 1000000)}M`}\n            label={\n              <Text x={0} y={0} dx={20} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <ReferenceLine\n            y={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label value=\"Top 4 Priority Groups Target\" position=\"top\" />\n          </ReferenceLine>\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default StackedVaccinationPlot;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={150}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 20,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            height={50}\n            align=\"center\"\n            wrapperStyle={{\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n}) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport moment from \"moment\";\nimport { BarChart, Bar, ResponsiveContainer, Cell } from \"recharts\";\n\nconst ScoreCard = ({ parsedData, targetDate, targetIndividuals, title }) => {\n  const [transformedData, setTransformedData] = useState(null);\n\n  const computeDaysToTarget = (data) => {\n    data.forEach((datum, index) => {\n      data[index][\"daysToTarget\"] = moment(targetDate)\n        .startOf(\"day\")\n        .diff(moment(data[index][\"date\"]).startOf(\"day\"), \"days\");\n    });\n\n    return data;\n  };\n\n  const computePredictedDaysToTarget = (data) => {\n    data.forEach((datum, index) => {\n      data[index][\"predictedDaysToTarget\"] =\n        (targetIndividuals -\n          datum[\"cumPeopleVaccinatedFirstDoseByPublishDate\"]) /\n        datum[\"sevenDaysRate\"];\n\n      data[index][\"deltaTargetVsPredicted\"] =\n        data[index][\"daysToTarget\"] - data[index][\"predictedDaysToTarget\"];\n\n      data[index][\"predictedDate\"] = moment(targetDate)\n        .add(-1 * data[index][\"deltaTargetVsPredicted\"], \"days\")\n        .format(\"DD MMMM YYYY\");\n    });\n\n    return data;\n  };\n\n  useEffect(() => {\n    if (parsedData) {\n      let transformedData_ = JSON.parse(JSON.stringify(parsedData));\n      transformedData_ = computeDaysToTarget(transformedData_);\n      transformedData_ = computePredictedDaysToTarget(transformedData_);\n\n      setTransformedData(transformedData_);\n    }\n  }, [parsedData]);\n\n  if (transformedData) {\n    let progressContent;\n    const latestIndex = transformedData.length - 1;\n\n    const delta = Math.round(\n      transformedData[latestIndex][\"deltaTargetVsPredicted\"]\n    );\n\n    if (delta < 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"warning circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"red\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.abs(delta)}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} late\n            </b>\n            <p>({transformedData[latestIndex][\"predictedDate\"]})</p>\n          </div>\n        </Fragment>\n      );\n    } else if (delta > 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.round(Math.abs(delta))}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} early\n            </b>\n            <p>({transformedData[latestIndex][\"predictedDate\"]})</p>\n          </div>\n        </Fragment>\n      );\n    } else {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            Predicted to hit target on the day!\n          </div>\n        </Fragment>\n      );\n    }\n\n    return (\n      <Grid.Column width={5} textAlign=\"center\">\n        <Grid centered>\n          <Segment\n            basic\n            style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n            textAlign=\"center\"\n          >\n            <Header as=\"h4\" textAlign=\"center\">\n              <Header.Content>{title}</Header.Content>\n              <Header.Subheader>\n                {`${targetIndividuals / 1000000}M 1st doses by ${moment(\n                  targetDate\n                ).format(\"DD MMM\")}`}\n              </Header.Subheader>\n            </Header>\n            <CircularProgressbarWithChildren\n              value={\n                (transformedData[latestIndex][\n                  \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n                ] /\n                  targetIndividuals) *\n                100\n              }\n            >\n              {progressContent}\n            </CircularProgressbarWithChildren>\n            <ResponsiveContainer width={\"100%\"} height={50}>\n              <BarChart\n                margin={{\n                  top: 10,\n                  right: 40,\n                  left: 40,\n                  bottom: 0,\n                }}\n                data={transformedData.slice(6, transformedData.length)}\n              >\n                <Bar dataKey=\"deltaTargetVsPredicted\" strokeWidth={2}>\n                  {transformedData\n                    .slice(6, transformedData.length)\n                    .map((entry, index) => {\n                      const color =\n                        entry.deltaTargetVsPredicted >= 0\n                          ? \"#b8e6c2\"\n                          : \"#e6a1a1\";\n                      return <Cell fill={color} />;\n                    })}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </Segment>\n        </Grid>\n      </Grid.Column>\n    );\n  } else return null;\n};\n\nexport default ScoreCard;\n","import React from \"react\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_4_TOP_PRIORITY_GROUPS_DATE,\n  TARGET_ALL_GROUPS_DATE,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_DATE,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\n\nimport ScoreCard from \"./ScoreCard\";\n\nconst ScoreCardGroup = ({ parsedData }) => {\n  return (\n    <Grid stackable centered columns={3}>\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCard\n          parsedData={parsedData}\n          targetDate={TARGET_4_TOP_PRIORITY_GROUPS_DATE}\n          targetIndividuals={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n          title=\"Top 4 Priority Groups\"\n        />\n        <ScoreCard\n          parsedData={parsedData}\n          targetDate={TARGET_ALL_GROUPS_DATE}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n        />\n        <ScoreCard\n          parsedData={parsedData}\n          targetDate={TARGET_ADULT_POPULATION_DATE}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"Adult Population\"\n        />\n      </Grid.Row>\n    </Grid>\n  );\n};\nexport default ScoreCardGroup;\n","import React, { useState, useEffect } from \"react\";\nimport { Statistic, Segment, Grid, Header, Icon } from \"semantic-ui-react\";\nimport _ from \"lodash\";\n\nconst VaccineStatistics = ({ parsedData }) => {\n  const [loaded, setLoaded] = useState(null);\n\n  const [allDosesStatistics, setAllDosesStatistics] = useState(null);\n  const [firstDosesStatistics, setFirstDosesStatistics] = useState(null);\n  const [secondDosesStatistics, setSecondDosesStatistics] = useState(null);\n\n  useEffect(() => {\n    if (parsedData) {\n      const latestIndex = parsedData.length - 1;\n\n      setAllDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        dayOnDay:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        weekOnWeek:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        completedCourses:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n      });\n\n      setFirstDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n        dayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        weekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n        sevenDaysRateDeltaDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          32000000,\n      });\n\n      setSecondDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        dayOnDay:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        weekOnWeek:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDeltaDay:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 32000000,\n      });\n      setLoaded(true);\n    }\n  }, [parsedData]);\n\n  if (loaded)\n    return (\n      <Grid>\n        <Grid.Row>\n          <Segment basic>\n            <Header as=\"h4\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ + 2️⃣ All Doses</Header.Content>\n            </Header>\n            <Statistic.Group size=\"tiny\" style={{ textAlign: \"center\" }}>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(allDosesStatistics.total)}\n                </Statistic.Value>\n                <Statistic.Label>Cumulative</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(allDosesStatistics.new)}\n                </Statistic.Value>\n                <Statistic.Label>Daily Rate</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={allDosesStatistics.dayOnDay > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {allDosesStatistics.dayOnDay > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(allDosesStatistics.dayOnDay * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Day (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={allDosesStatistics.weekOnWeek > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {allDosesStatistics.weekOnWeek > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(allDosesStatistics.weekOnWeek * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Week (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(allDosesStatistics.completedCourses * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Completed Courses</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic>\n            <Header as=\"h4\" dividing dividing textAlign=\"left\">\n              <Header.Content>1️⃣ First Doses</Header.Content>\n            </Header>\n            <Statistic.Group size=\"tiny\" style={{ textAlign: \"center\" }}>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(firstDosesStatistics.total)}\n                </Statistic.Value>\n                <Statistic.Label>Cumulative</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(firstDosesStatistics.new)}\n                </Statistic.Value>\n                <Statistic.Label>Daily Rate</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={firstDosesStatistics.dayOnDay > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {firstDosesStatistics.dayOnDay > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(firstDosesStatistics.dayOnDay * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Day (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={firstDosesStatistics.weekOnWeek > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {firstDosesStatistics.weekOnWeek > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(firstDosesStatistics.weekOnWeek * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Week (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(firstDosesStatistics.sevenDaysRate)\n                  )}\n                </Statistic.Value>\n                <Statistic.Label>7-day average</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(firstDosesStatistics.adultPopulationDone * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Adults (53M)</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(firstDosesStatistics.priorityGroupsDone * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Priority Groups (32M)</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic>\n            <Header as=\"h4\" dividing dividing textAlign=\"left\">\n              <Header.Content>2️⃣ Second Doses</Header.Content>\n            </Header>\n            <Statistic.Group size=\"tiny\" style={{ textAlign: \"center\" }}>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(secondDosesStatistics.total)}\n                </Statistic.Value>\n                <Statistic.Label>Cumulative</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(secondDosesStatistics.new)}\n                </Statistic.Value>\n                <Statistic.Label>Daily Rate</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={secondDosesStatistics.dayOnDay > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {secondDosesStatistics.dayOnDay > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(secondDosesStatistics.dayOnDay * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Day (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic\n                color={secondDosesStatistics.weekOnWeek > 0 ? \"green\" : \"red\"}\n              >\n                <Statistic.Value>\n                  {secondDosesStatistics.weekOnWeek > 0 ? \"+\" : null}\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(secondDosesStatistics.weekOnWeek * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Δ Week (Rate)</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(secondDosesStatistics.sevenDaysRate)\n                  )}\n                </Statistic.Value>\n                <Statistic.Label>7-day average</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(secondDosesStatistics.adultPopulationDone * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Adults (53M)</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  {Intl.NumberFormat(\"en\").format(\n                    Math.round(secondDosesStatistics.priorityGroupsDone * 100)\n                  )}\n                  %\n                </Statistic.Value>\n                <Statistic.Label>Priority Groups (32M)</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </Segment>\n        </Grid.Row>\n      </Grid>\n    );\n  else return null;\n};\n\nexport default VaccineStatistics;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n} from \"semantic-ui-react\";\nimport StackedVaccinationPlot from \"./components/StackedVaccinationPlot\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroup from \"./components/ScoreCardGroup\";\nimport VaccineStatistics from \"./components/VaccineStatistics\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n\n  const computeAverageRate = (data, days, fromKey, toKey) => {\n    data.forEach((datum, index) => {\n      if (index >= 6) {\n        data[index][toKey] = _.mean(\n          data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n        );\n      } else data[index][toKey] = null;\n    });\n\n    return data;\n  };\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n\n        <Segment padded=\"very\" raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  respository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n        <GenericContainer\n          ChildComponent={<VaccineStatistics parsedData={parsedData} />}\n          title=\"Key Numbers\"\n          description=\"Key numbers related to the vaccination programme.\"\n          dateUpdated={updateDate}\n        />\n\n        <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}