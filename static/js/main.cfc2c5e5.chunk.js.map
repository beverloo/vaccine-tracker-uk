{"version":3,"sources":["components/StackedVaccinationPlot.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","assets/logo.png","App.js","reportWebVitals.js","index.js"],"names":["CustomizedAxisTick","x","y","payload","stroke","transform","dy","textAnchor","fill","value","StackedVaccinationPlot","parsedData","ResponsiveContainer","width","height","AreaChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","Legend","verticalAlign","formatter","entry","index","XAxis","dataKey","tick","domain","date","length","label","YAxis","tickFormatter","Intl","NumberFormat","format","Text","dx","offset","angle","Tooltip","name","Area","type","stackId","ReferenceLine","Label","position","CustomBarLabel","viewBox","fontFamily","parseInt","toFixed","VaccinationProgressPlot","BarChart","layout","hide","align","wrapperStyle","paddingLeft","Bar","background","fontSize","fontStyle","DailyRatesPlot","useEffect","shift","GenericContainer","ChildComponent","title","description","dateUpdated","Card","fluid","Content","Header","Meta","Description","extra","Icon","App","useState","setParsedData","updateDate","setUpdateDate","rawData","vaccination_json","sort","a","b","Date","latestDate","moment","add","className","Container","as","textAlign","Image","src","logo","circular","bordered","Subheader","Segment","padded","raised","size","dividing","basic","List","bulleted","Item","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfc2c5e5.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ReferenceLine,\n  Text,\n  Legend,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={16}\n        textAnchor=\"end\"\n        fill=\"#666\"\n        transform=\"rotate(-35)\"\n      >\n        {payload.value}\n      </text>\n    </g>\n  );\n};\n\nconst StackedVaccinationPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <AreaChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 100,\n            bottom: 100,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 75, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={50} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <ReferenceLine y={13000000} stroke=\"red\" strokeDasharray=\"3 3\">\n            <Label value=\"Top 4 Priority Groups Target\" position=\"top\" />\n          </ReferenceLine>\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default StackedVaccinationPlot;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={150}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 20,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            height={50}\n            align=\"center\"\n            wrapperStyle={{\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <ReferenceLine x={13000000} stroke=\"red\" strokeDasharray=\"3 3\">\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine x={25000000} stroke=\"red\" strokeDasharray=\"3 3\">\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine x={66000000} stroke=\"red\" strokeDasharray=\"3 3\">\n            <Label\n              value=\"Whole Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  BarChart,\n  Bar,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={16}\n        textAnchor=\"end\"\n        fill=\"#666\"\n        transform=\"rotate(-35)\"\n      >\n        {payload.value}\n      </text>\n    </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  useEffect(() => {\n    if (parsedData) parsedData.shift();\n  }, [parsedData]);\n\n  if (parsedData) {\n    // parsedData.shift()\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <BarChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 100,\n            bottom: 100,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 75, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={50} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n}) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n} from \"semantic-ui-react\";\nimport StackedVaccinationPlot from \"./components/StackedVaccinationPlot\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    setParsedData(rawData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = rawData[rawData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n\n        <Segment padded=\"very\" raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  respository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021.\"\n          dateUpdated={updateDate}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}