{"version":3,"sources":["data/ImportantValues.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","components/ScoreCardWithDebt.js","components/ScoreCardGroupWithDebt.js","components/VaccineStatisticsCompactCard.js","components/VaccineStatisticsCompact.js","assets/logo.png","App.js","reportWebVitals.js","index.js"],"names":["TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS","TARGET_ALL_GROUPS_DATE","TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","TARGET_ADULT_POPULATION_DATE","CustomBarLabel","x","y","fill","value","width","viewBox","height","dx","dy","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","parsedData","data","length","ResponsiveContainer","BarChart","layout","margin","top","right","left","bottom","XAxis","type","domain","hide","YAxis","tick","Legend","verticalAlign","align","wrapperStyle","paddingLeft","formatter","entry","index","Bar","dataKey","background","label","ReferenceLine","stroke","strokeDasharray","Label","position","fontSize","fontStyle","CustomizedAxisTick","payload","moment","format","DailyRatesPlot","ComposedChart","CartesianGrid","date","tickFormatter","Intl","NumberFormat","Text","offset","angle","Tooltip","name","stackId","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","Card","fluid","Content","Header","Meta","Description","textAlign","extra","Icon","ScoreCardWithDebt","debtData","targetDate","targetIndividuals","useState","eventDay","setEventDay","useEffect","eventDay_","find","datum","cumFirstDoses","console","log","progressContent","delta","Math","round","diff","style","marginTop","paddingBottom","size","color","marginLeft","marginRight","abs","Grid","Column","centered","Segment","basic","maxWidth","as","Subheader","ScoreCardGroupWithDebt","setDebtData","predictDebtIntoFuture","allDosesRate","firstDosesColumn","maxFirstDoses","initialCumFirstDoses","initialCumSecondDoses","carryOver","secondDosesDue","cumSecondDoses","secondDosesDueRecord","carryOverRecord","secondDosesDone","spareCapacity","firstDosesDone","add","secondDosesCarryOverFromPreviousDay","secondDosesNewFromDay","fillDataWithConstantRate","initialData","daysToFill","rate","cumFirstDosesColumn","cumSecondDosesColumn","fillData","i","maxFirstDosesReached","maxSecondDosesReached","push","RATE","sevenDaysRate","sevenDaysRateSecond","fillingDays","fillData1","debtData_","shift","fillData2","debtData_2","fillData3","debtData_3","allDebtData","stackable","columns","Row","VaccineStatisticsCompactCard","mainFigure","dayOnDay","dayOnDayPercent","weekOnWeek","weekOnWeekPercent","dataToPlot","disableDeltaRounding","compact","Statistic","Value","filter","item","VaccineStatisticsCompact","loaded","setLoaded","allDosesStatistics","setAllDosesStatistics","firstDosesStatistics","setFirstDosesStatistics","secondDosesStatistics","setSecondDosesStatistics","latestIndex","total","totalDayOnDay","totalDayOnDayPercent","totalWeekOnWeek","totalWeekOnWeekPercent","new","newDayOnDayPercent","newDayOnDay","newWeekOnWeek","newWeekOnWeekPercent","completedCourses","completedCoursesWeekOnWeek","completedCoursesDayOnDay","sevenDaysRateDayOnDay","sevenDaysRateDayOnDayPercent","sevenDaysRateWeekOnWeek","sevenDaysRateWeekOnWeekPercent","adultPopulationDone","adultPopulationDoneDayOnDay","adultPopulationDoneWeekOnWeek","priorityGroupsDone","priorityGroupsDoneDayOnDay","priorityGroupsDoneWeekOnWeek","dividing","Group","marginBottom","Progress","percent","progress","App","setParsedData","updateDate","setUpdateDate","computeAverageRate","days","fromKey","toKey","forEach","_","mean","slice","a","rawData","vaccination_json","sort","b","Date","latestDate","className","Container","Image","src","logo","circular","bordered","Message","info","href","raised","List","bulleted","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22eeac7e.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 53000000;\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-07-31\"; // Based on new target https://news.sky.com/story/covid-19-all-adults-to-be-offered-vaccine-by-end-of-july-under-pms-accelerated-plan-12224309\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={150}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 20,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            height={50}\n            align=\"center\"\n            wrapperStyle={{\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" height={500}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n}) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport moment from \"moment\";\n\nconst ScoreCardWithDebt = ({\n  debtData,\n  parsedData,\n  targetDate,\n  targetIndividuals,\n  title,\n}) => {\n  const [eventDay, setEventDay] = useState(null);\n\n  useEffect(() => {\n    if (debtData) {\n      const eventDay_ = debtData.find(\n        (datum) => datum.cumFirstDoses >= targetIndividuals\n      );\n\n      setEventDay(eventDay_);\n      console.log(eventDay_);\n    }\n  }, [debtData]);\n\n  if (eventDay && parsedData) {\n    let progressContent;\n\n    const delta = Math.round(\n      moment(eventDay.date).diff(moment(targetDate), \"days\")\n    );\n\n    if (delta > 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"warning circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"red\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.abs(delta)}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} late\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else if (delta < 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.round(Math.abs(delta))}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} early\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            Predicted to hit target on the day!\n          </div>\n        </Fragment>\n      );\n    }\n\n    return (\n      <Grid.Column width={5} textAlign=\"center\">\n        <Grid centered>\n          <Segment\n            basic\n            style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n            textAlign=\"center\"\n          >\n            <Header as=\"h4\" textAlign=\"center\">\n              <Header.Content>{title}</Header.Content>\n              <Header.Subheader>\n                {`${targetIndividuals / 1000000}M 1st doses by ${moment(\n                  targetDate\n                ).format(\"DD MMM\")}`}\n              </Header.Subheader>\n            </Header>\n            <CircularProgressbarWithChildren\n              value={\n                (parsedData[parsedData.length - 1][\n                  \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n                ] /\n                  targetIndividuals) *\n                100\n              }\n            >\n              {progressContent}\n            </CircularProgressbarWithChildren>\n          </Segment>\n        </Grid>\n      </Grid.Column>\n    );\n  } else return null;\n  // return null;\n};\n\nexport default ScoreCardWithDebt;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  TARGET_ALL_GROUPS_DATE,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_DATE,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport ScoreCardWithDebt from \"./ScoreCardWithDebt\";\n\nconst ScoreCardGroupWithDebt = ({ parsedData }) => {\n  const [debtData, setDebtData] = useState(null);\n\n  const predictDebtIntoFuture = (\n    data,\n    allDosesRate,\n    firstDosesColumn,\n    maxFirstDoses,\n    initialCumFirstDoses,\n    initialCumSecondDoses\n  ) => {\n    let carryOver = 0;\n    let secondDosesDue = 0;\n\n    let cumFirstDoses = 0;\n    let cumSecondDoses = 0;\n\n    const debtData_ = data.map((datum, index) => {\n      // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n      secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n      let secondDosesDueRecord = secondDosesDue;\n      let carryOverRecord = carryOver;\n\n      let secondDosesDone = 0;\n\n      if (\n        index > 0 &&\n        cumFirstDoses >= maxFirstDoses &&\n        cumSecondDoses <= maxFirstDoses\n      ) {\n        secondDosesDone = allDosesRate;\n      } else {\n        if (secondDosesDue >= allDosesRate) {\n          secondDosesDone = allDosesRate;\n          carryOver = secondDosesDue - allDosesRate;\n        } else {\n          secondDosesDone = secondDosesDue;\n          carryOver = 0;\n        }\n      }\n\n      let spareCapacity = allDosesRate - secondDosesDone;\n      let firstDosesDone = 0;\n\n      if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n        firstDosesDone = spareCapacity;\n\n      secondDosesDue -= secondDosesDue;\n\n      if (index == 0) {\n        if (initialCumFirstDoses && initialCumSecondDoses) {\n          cumFirstDoses = initialCumFirstDoses;\n          cumSecondDoses = initialCumSecondDoses;\n        } else {\n          cumFirstDoses = firstDosesDone;\n          cumSecondDoses = secondDosesDone;\n        }\n      } else {\n        cumFirstDoses += firstDosesDone;\n        cumSecondDoses += secondDosesDone;\n      }\n\n      return {\n        date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n        secondDosesDone: secondDosesDone,\n        firstDosesDone: firstDosesDone,\n        secondDosesCarryOverFromPreviousDay: carryOverRecord,\n        secondDosesNewFromDay: datum[firstDosesColumn],\n        spareCapacity: spareCapacity,\n        secondDosesDue: secondDosesDueRecord,\n        cumFirstDoses: cumFirstDoses,\n        cumSecondDoses: cumSecondDoses,\n      };\n    });\n\n    return debtData_;\n  };\n\n  const fillDataWithConstantRate = (\n    initialData,\n    daysToFill,\n    rate,\n    cumFirstDosesColumn,\n    cumSecondDosesColumn,\n    maxFirstDoses\n  ) => {\n    let fillData = [];\n\n    let cumFirstDoses = 0;\n    let cumSecondDoses = 0;\n\n    for (let i = 1; i < daysToFill; i++) {\n      let maxFirstDosesReached = false;\n      let maxSecondDosesReached = false;\n\n      if (i == 1) {\n        if (\n          initialData[initialData.length - 1][cumFirstDosesColumn] >=\n          maxFirstDoses\n        )\n          maxFirstDosesReached = true;\n        if (\n          initialData[initialData.length - 1][cumSecondDosesColumn] >=\n          maxFirstDoses\n        )\n          maxSecondDosesReached = true;\n\n        if (!maxFirstDosesReached && !maxSecondDosesReached) {\n          cumFirstDoses =\n            initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n          cumSecondDoses =\n            initialData[initialData.length - 1][cumSecondDosesColumn];\n        } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n          cumFirstDoses =\n            initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n          cumSecondDoses =\n            initialData[initialData.length - 1][cumSecondDosesColumn];\n        } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n          cumFirstDoses =\n            initialData[initialData.length - 1][cumFirstDosesColumn];\n          cumSecondDoses =\n            initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n        } else if (maxFirstDosesReached && maxSecondDosesReached) {\n          cumFirstDoses =\n            initialData[initialData.length - 1][cumFirstDosesColumn];\n          cumSecondDoses =\n            initialData[initialData.length - 1][cumSecondDosesColumn];\n        } else {\n          console.log(\"Should never reach this\");\n        }\n      } else {\n        if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n        if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n        if (!maxFirstDosesReached && !maxSecondDosesReached)\n          cumFirstDoses += rate;\n        else if (!maxFirstDosesReached && maxSecondDosesReached)\n          cumFirstDoses += rate;\n        else if (maxFirstDosesReached && !maxSecondDosesReached)\n          cumSecondDoses += rate;\n        else if (maxFirstDosesReached && maxSecondDosesReached) {\n          // do nothing\n        } else console.log(\"Should never reach this\");\n      }\n\n      fillData.push({\n        date: moment(initialData[initialData.length - 1].date)\n          .add(i, \"day\")\n          .format(\"YYYY-MM-DD\"),\n        secondDosesDone: 0,\n        firstDosesDone: rate,\n        secondDosesCarryOverFromPreviousDay: 0,\n        secondDosesNewFromDay: 0,\n        spareCapacity: rate,\n        secondDosesDue: 0,\n        cumFirstDoses: cumFirstDoses,\n        cumSecondDoses: cumSecondDoses,\n      });\n    }\n\n    return fillData;\n  };\n\n  useEffect(() => {\n    if (parsedData) {\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n\n      // IS THIS ALWAYS 44??????? NEED TO MAKE IT DYNAMIC\n\n      const fillingDays =\n        Math.abs(\n          moment(parsedData[parsedData.length - 1].date).diff(\n            moment(parsedData[0].date).add(12, \"weeks\"),\n            \"days\"\n          )\n        ) + 1;\n\n      const fillData1 = fillDataWithConstantRate(\n        parsedData,\n        fillingDays,\n        RATE,\n        \"cumPeopleVaccinatedFirstDoseByPublishDate\",\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\",\n        53000000\n      );\n\n      let debtData_ = predictDebtIntoFuture(\n        parsedData,\n        RATE,\n        \"newPeopleVaccinatedFirstDoseByPublishDate\",\n        53000000,\n        fillData1[fillData1.length - 1][\"cumFirstDoses\"],\n        fillData1[fillData1.length - 1][\"cumSecondDoses\"]\n      );\n\n      debtData_.shift(); // First element does not contain a new vaccination rate\n\n      const fillData2 = fillDataWithConstantRate(\n        debtData_,\n        fillingDays,\n        RATE,\n        \"cumFirstDoses\",\n        \"cumSecondDoses\",\n        53000000\n      );\n\n      let debtData_2 = predictDebtIntoFuture(\n        debtData_,\n        RATE,\n        \"firstDosesDone\",\n        53000000,\n        fillData2[fillData2.length - 1][\"cumFirstDoses\"],\n        fillData2[fillData2.length - 1][\"cumSecondDoses\"]\n      );\n\n      const fillData3 = fillDataWithConstantRate(\n        debtData_2,\n        fillingDays,\n        RATE,\n        \"cumFirstDoses\",\n        \"cumSecondDoses\",\n        53000000\n      );\n\n      let debtData_3 = predictDebtIntoFuture(\n        debtData_2,\n        RATE,\n        \"firstDosesDone\",\n        53000000,\n        fillData3[fillData3.length - 1][\"cumFirstDoses\"],\n        fillData3[fillData3.length - 1][\"cumSecondDoses\"]\n      );\n\n      const allDebtData = [\n        ...fillData1,\n        ...debtData_,\n        ...fillData2,\n        ...debtData_2,\n        ...fillData3,\n        ...debtData_3,\n      ];\n\n      // console.log(fillData1);\n      // console.log(debtData_);\n      // console.log(fillData2);\n      // console.log(debtData_2);\n\n      setDebtData(allDebtData);\n    }\n  }, [parsedData]);\n\n  return (\n    <Grid stackable centered columns={3}>\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ALL_GROUPS_DATE}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n        />\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ADULT_POPULATION_DATE}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"Adult Population\"\n        />\n      </Grid.Row>\n    </Grid>\n  );\n};\nexport default ScoreCardGroupWithDebt;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst VaccineStatisticsCompactCard = ({\n  title,\n  description,\n  mainFigure,\n  dayOnDay,\n  dayOnDayPercent,\n  weekOnWeek,\n  weekOnWeekPercent,\n  dataToPlot,\n  disableDeltaRounding,\n}) => {\n  const getDayOnDay = () => {\n    if (dayOnDay)\n      return (\n        <Fragment>\n          {dayOnDay > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Day: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(dayOnDay.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(dayOnDay))}</b>\n          )}\n          {dayOnDayPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(dayOnDayPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n          <br />\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getWeekOnWeek = () => {\n    if (weekOnWeek)\n      return (\n        <Fragment>\n          {weekOnWeek > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Week: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(weekOnWeek.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(weekOnWeek))}</b>\n          )}\n          {weekOnWeekPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(weekOnWeekPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getPlot = () => {\n    if (dataToPlot) {\n      dataToPlot = dataToPlot.filter((item) => item.data != null);\n\n      return (\n        <BarChart\n          width={250}\n          height={50}\n          data={dataToPlot}\n          margin={{\n            top: 10,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <Tooltip />\n          <Bar type=\"monotone\" dataKey=\"data\" fill=\"#8884d8\" />\n        </BarChart>\n      );\n    } else return null;\n  };\n\n  return (\n    <Card textAlign=\"left\" compact>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>\n          <Statistic size=\"tiny\">\n            <Statistic.Value>{mainFigure}</Statistic.Value>\n          </Statistic>\n        </Card.Description>\n\n        <Card.Description>\n          {getDayOnDay()}\n          {getWeekOnWeek()}\n          {getPlot()}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default VaccineStatisticsCompactCard;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst VaccineStatisticsCompact = ({ parsedData }) => {\n  const [loaded, setLoaded] = useState(null);\n\n  const [allDosesStatistics, setAllDosesStatistics] = useState(null);\n  const [firstDosesStatistics, setFirstDosesStatistics] = useState(null);\n  const [secondDosesStatistics, setSecondDosesStatistics] = useState(null);\n\n  useEffect(() => {\n    if (parsedData) {\n      const latestIndex = parsedData.length - 1;\n\n      setAllDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        completedCourses:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        completedCoursesWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        completedCoursesDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        sevenDaysRate:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n          1,\n      });\n\n      setFirstDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n\n      setSecondDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n      setLoaded(true);\n    }\n  }, [parsedData]);\n\n  console.log(allDosesStatistics);\n\n  if (loaded)\n    return (\n      <Grid>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>💉 Overall Progress</Header.Content>\n            </Header>\n            <Card.Group>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Adult Population</Card.Header>\n                  <Card.Meta>53M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      color=\"blue\"\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneWeekOnWeek *\n                        100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Priority Groups</Card.Header>\n                  <Card.Meta>53M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      color=\"blue\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <VaccineStatisticsCompactCard\n                title=\"Completed Courses\"\n                description=\"Fraction of completed courses\"\n                mainFigure={\n                  (allDosesStatistics.completedCourses * 100).toFixed(1) + \"%\"\n                }\n                dayOnDay={allDosesStatistics.completedCoursesDayOnDay * 100}\n                weekOnWeek={allDosesStatistics.completedCoursesWeekOnWeek * 100}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n                disableDeltaRounding={true}\n              />\n            </Card.Group>\n          </Segment>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ + 2️⃣ All Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cummulative\"\n                description=\"Inoculations so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.total\n                )}\n                dayOnDay={allDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={allDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"Number of new inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.new\n                )}\n                dayOnDay={allDosesStatistics.newDayOnDay}\n                dayOnDayPercent={allDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(allDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={allDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  allDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={allDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  allDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"] + item[\"sevenDaysRateSecond\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ First Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cummulative\"\n                description=\"1st Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.total\n                )}\n                dayOnDay={firstDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.new\n                )}\n                dayOnDay={firstDosesStatistics.newDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={firstDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  firstDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={firstDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  firstDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>2️⃣ Second Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cummulative\"\n                description=\"2nd Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.total\n                )}\n                dayOnDay={secondDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.new\n                )}\n                dayOnDay={secondDosesStatistics.newDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={secondDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  secondDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={secondDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  secondDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRateSecond\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n      </Grid>\n    );\n  else return null;\n};\n\nexport default VaccineStatisticsCompact;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  Card,\n  List,\n  Statistic,\n  Message,\n} from \"semantic-ui-react\";\nimport StackedVaccinationPlot from \"./components/StackedVaccinationPlot\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport ScoreCardGroup from \"./components/ScoreCardGroup\";\n\nimport VaccineStatisticsCompact from \"./components/VaccineStatisticsCompact\";\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n\n  const computeAverageRate = (data, days, fromKey, toKey) => {\n    data.forEach((datum, index) => {\n      if (index >= 6) {\n        data[index][toKey] = _.mean(\n          data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n        );\n      } else data[index][toKey] = null;\n    });\n\n    return data;\n  };\n\n  // const computeAverageRateDual = (data, days, fromKey, toKey) => {\n  //   data.forEach((datum, index) => {\n  //     if (index >= 6) {\n  //       data[index][toKey] = _.mean(\n  //         data\n  //           .slice(index - (days - 1), index + 1)\n  //           .map((a) => a[fromKey[0]] + a[fromKey[1]])\n  //       );\n  //     } else data[index][toKey] = null;\n  //   });\n\n  //   return data;\n  // };\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n    // parsedData = computeAverageRateDual(\n    //   parsedData,\n    //   7,\n    //   [\n    //     \"newPeopleVaccinatedSecondDoseByPublishDate\",\n    //     \"newPeopleVaccinatedFirstDoseByPublishDate\",\n    //   ],\n    //   \"sevenDaysRateCombined\"\n    // );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <GenericContainer\n          ChildComponent={<VaccineStatisticsCompact parsedData={parsedData} />}\n          title=\"Rollout Dashboard\"\n          description=\"Key numbers related to the vaccination programme.\"\n          dateUpdated={updateDate}\n        />\n        {/* <GenericContainer\n          ChildComponent={<SecondDoseDebt parsedData={parsedData} />}\n          title=\"Second Doses Debt\"\n          description=\"Visualisations related to the so-called second doses debt, in other words the number of second doses that will have to be administered to complete full courses of vaccination. The area plot on the left-hande side shows what the debt might look like and was generated by adding a 12-weeks delay from 1st doses.\"\n          dateUpdated={updateDate}\n        /> */}\n        <GenericContainer\n          ChildComponent={<ScoreCardGroupWithDebt parsedData={parsedData} />}\n          title=\"Government Target Scorecard (Second Doses Debt Model)\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n        />\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n        />\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}